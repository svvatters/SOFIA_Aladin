package sofia.dcs.aor;

import java.io.InputStream;
import java.text.ParseException;

import sofia.mops.aladin.Catalog;
import cds.aladin.Aladin;
import cds.astro.Astrocoo;
import cds.astro.Astroformat;

/**
 * @author shannon.watters@gmail.com
 *
 */
public class Pointing extends Astrocoo{
    
    private final String obsID;
    private final String objName;
    private final String aorObjName;
    private final String instrumentID;
    private final String configuration;
    private final String equinox;
    
    /**
     * @param obs
     * @param p
     * @throws ParseException 
     */
    public Pointing(Observation obs, FixedTarget p) throws ParseException {
        this.obsID = obs.getId();
        this.aorObjName = p.getObjectName();
        this.instrumentID = obs.getInstrumentId();
        this.configuration = obs.getInstrumentConfigurations();
        this.equinox = p.getEquinox();

        //Format objName so it is MCCS pos compatible
        /* TODO Move formatName (at least this version) to something in
         * package sofia.aladin.  Want this to be able to run with any
         * version of Aladin (not just SOFIA-extended version)
         */
        this.objName = cds.aladin.SOFIAUtils.formatName(this.aorObjName);
        
        //Format the coords so they work as inputs for parent Astrocoo.set()
        String ra = cds.aladin.SOFIAUtils.formatCoord(p.getRightAscension());
        String dec = cds.aladin.SOFIAUtils.formatCoord(p.getDeclination());
        /*
         *  Use the parent class constructor to set the coordinates. Throws
         *  a ParseException
         */
        this.set(ra + " " + dec);        
        this.setPrecision(7, 6);
        // TODO Handle RA and Decs that end up out of bounds
    }

    /**
     * @return the obsID
     */
    public String getObsID() {
        return obsID;
    }

    /**
     * @return the objName
     */
    public String getObjName() {
        return objName;
    }

    /**
     * @return the instrumentID
     */
    public String getInstrumentID() {
        return instrumentID;
    }

    /**
     * @return the configuration
     */
    public String getConfiguration() {
        return configuration;
    }

    /**
     * @return the equinox
     */
    public String getEquinox() {
        return equinox;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        
        //
        String[] c = super.toString(Astroformat.SEXA3h).split("s", 2);
        // Replace the 's' stripped from the ra coord
        c[0] = c[0] + 's';      
                
        return (this.obsID + "\t" + 
                this.objName + "\t" + 
                c[0] + "\t" + 
                c[1] + "\t" + 
                this.equinox + "\t" +
                this.instrumentID + "\t" +
                this.configuration);  
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result
                + ((configuration == null) ? 0 : configuration.hashCode());
        result = prime * result + ((equinox == null) ? 0 : equinox.hashCode());
        result = prime * result
                + ((instrumentID == null) ? 0 : instrumentID.hashCode());
        return result;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object obj) {

        /*
         *  This block was not generated by Eclipse
         */
        if (obj == null) 
            return false;
       
        if (this == obj)
            return true;
        if (!super.equals(obj))
            return false;
        if (!(obj instanceof Pointing))
            return false;
        Pointing other = (Pointing) obj;
        if (configuration == null) {
            if (other.configuration != null)
                return false;
        } else if (!configuration.equals(other.configuration))
            return false;
        if (equinox == null) {
            if (other.equinox != null)
                return false;
        } else if (!equinox.equals(other.equinox))
            return false;
        if (instrumentID == null) {
            if (other.instrumentID != null)
                return false;
        } else if (!instrumentID.equals(other.instrumentID))
            return false;
        return true;
    }
}
